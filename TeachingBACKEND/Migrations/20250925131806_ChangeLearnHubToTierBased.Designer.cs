// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachingBACKEND.Data;

#nullable disable

namespace TeachingBACKEND.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250925131806_ChangeLearnHubToTierBased")]
    partial class ChangeLearnHubToTierBased
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2d4a4ee-5fa2-4a33-bd3c-2bbf98e9310b"),
                            Name = "Tirana"
                        },
                        new
                        {
                            Id = new Guid("b8e13e5a-bba4-48b6-99d6-c4f123ab2cb3"),
                            Name = "Durrës"
                        },
                        new
                        {
                            Id = new Guid("d05f0e99-20f0-4c9a-b03f-3ea92ec02b41"),
                            Name = "Shkodër"
                        },
                        new
                        {
                            Id = new Guid("bc4e14b5-7d7e-4b6c-8b33-eaa2c91f9015"),
                            Name = "Vlorë"
                        },
                        new
                        {
                            Id = new Guid("2dff0b99-3d86-47a5-b7ad-4e6d3c0ec748"),
                            Name = "Elbasan"
                        },
                        new
                        {
                            Id = new Guid("12f4c32b-4a42-4b1f-9247-9b40efb21363"),
                            Name = "Fier"
                        },
                        new
                        {
                            Id = new Guid("f8d8e184-74c0-4551-b66b-7ae3f05e7ff5"),
                            Name = "Korçë"
                        },
                        new
                        {
                            Id = new Guid("69e02c84-4a61-406e-844d-24df2e25a983"),
                            Name = "Gjirokastër"
                        },
                        new
                        {
                            Id = new Guid("8e065f0d-71c1-4a63-804b-49b1d08c1407"),
                            Name = "Berat"
                        },
                        new
                        {
                            Id = new Guid("d28f0be5-5f17-4ec8-b365-7387c22234e9"),
                            Name = "Lezhë"
                        },
                        new
                        {
                            Id = new Guid("e5f957d6-7a31-45b2-bded-44e4992d4b83"),
                            Name = "Kukës"
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3f9a8f1-9c4e-4a91-8bcb-0b6b1583d3a1"),
                            Name = "Klasa 1"
                        },
                        new
                        {
                            Id = new Guid("a61d58b7-23f8-48f7-9778-3e048c5808a0"),
                            Name = "Klasa 2"
                        },
                        new
                        {
                            Id = new Guid("81bce1db-4f7c-4f6f-9e59-cde56a8200b6"),
                            Name = "Klasa 3"
                        },
                        new
                        {
                            Id = new Guid("f82a2ea4-c4c9-4895-9484-0197a299c02f"),
                            Name = "Klasa 4"
                        },
                        new
                        {
                            Id = new Guid("10840373-f0f4-4b10-9ee0-c5a831b6cf6a"),
                            Name = "Klasa 5"
                        },
                        new
                        {
                            Id = new Guid("7fc8018d-6310-4c1f-b878-4b3a5b0b265c"),
                            Name = "Klasa 6"
                        },
                        new
                        {
                            Id = new Guid("8e77a87f-e42b-487a-9cde-54f648c8c457"),
                            Name = "Klasa 7"
                        },
                        new
                        {
                            Id = new Guid("43e7b804-0e1a-4c82-9e44-6a194ee1ff63"),
                            Name = "Klasa 8"
                        },
                        new
                        {
                            Id = new Guid("fd4b14ea-1b79-4e4c-83e0-0196c55b4bc1"),
                            Name = "Klasa 9"
                        },
                        new
                        {
                            Id = new Guid("1c0b8bb7-9eb9-4a4d-8c4d-67de8057ae49"),
                            Name = "Klasa 10"
                        },
                        new
                        {
                            Id = new Guid("3402fc90-d7be-420e-a980-2ff430d84838"),
                            Name = "Klasa 11"
                        },
                        new
                        {
                            Id = new Guid("013d0df5-50ef-4269-8a12-9b4f91ef07e1"),
                            Name = "Klasa 12"
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.LearnHub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ClassType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("RequiredTier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LearnHubs");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("LearnHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LearnHubId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OptionImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuizzId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OptionImageId");

                    b.HasIndex("QuizzId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubscriptionPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.QuizType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuizTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1b1b1b1-b1b1-1111-1111-111111111111"),
                            Name = "text"
                        },
                        new
                        {
                            Id = new Guid("b2b2b2b2-b2b2-2222-2222-222222222222"),
                            Name = "imazhe"
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Quizz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExplanationAudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentQuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QuestionAudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizzTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExplanationAudioId");

                    b.HasIndex("LinkId");

                    b.HasIndex("ParentQuizId");

                    b.HasIndex("QuestionAudioId");

                    b.HasIndex("QuizzTypeId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.StudentPerformanceSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageTimePerQuiz")
                        .HasColumnType("float");

                    b.Property<int>("CompletedQuizzes")
                        .HasColumnType("int");

                    b.Property<double>("CompletionRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstAttemptAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastAttemptAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalPointsEarned")
                        .HasColumnType("int");

                    b.Property<int>("TotalPossiblePoints")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuizzes")
                        .HasColumnType("int");

                    b.Property<int>("TotalTimeSpent")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPerformanceSummaries");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.StudentQuizPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttemptsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAttemptAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSpentSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentQuizPerformances");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.StudentQuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentAnswerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TimeSpentSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentQuizSessions");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Subjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbe6757d-2138-463a-bee7-5d07a6d7b320"),
                            Name = "Letërsi"
                        },
                        new
                        {
                            Id = new Guid("616273bd-2a2a-4894-b689-57fe86702ae0"),
                            Name = "Matematik"
                        },
                        new
                        {
                            Id = new Guid("a072e5ed-714d-40d3-9af8-3b5b940acd2f"),
                            Name = "Anglisht"
                        },
                        new
                        {
                            Id = new Guid("a5cf5e27-ef08-4fef-b907-109496b284eb"),
                            Name = "Histori"
                        },
                        new
                        {
                            Id = new Guid("5eac82ae-0b4b-47a8-9871-ba6ab1c99df7"),
                            Name = "Gjeografi"
                        },
                        new
                        {
                            Id = new Guid("faf6b93a-91d1-4ead-85f5-0120ac85f7d2"),
                            Name = "Shkenca"
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CurrentPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CurrentPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<int>("IntervalCount")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripeCustomerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StripePriceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StripeSubscriptionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("SubscriptionPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TrialEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.SubscriptionPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("BasePrice")
                        .HasColumnType("bigint");

                    b.Property<int>("BillingInterval")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxFamilyMembers")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<int?>("MinFamilyMembers")
                        .HasColumnType("int");

                    b.Property<long>("MonthlyPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PricePerAdditionalMember")
                        .HasColumnType("bigint");

                    b.Property<string>("StripeMonthlyPriceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeYearlyPriceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TrialDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<long>("YearlyPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPackages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2880),
                            Description = "Basic student package with monthly billing",
                            IsActive = true,
                            MaxUsers = 1,
                            MonthlyPrice = 2000L,
                            Name = "Student Basic Monthly",
                            StripeMonthlyPriceId = "price_student_basic_monthly",
                            StripeYearlyPriceId = "price_student_basic_yearly",
                            Tier = 1,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2880),
                            UserType = 1,
                            YearlyPrice = 20000L
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-2222-2222-222222222222"),
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2880),
                            Description = "Basic student package with yearly billing",
                            IsActive = true,
                            MaxUsers = 1,
                            MonthlyPrice = 2000L,
                            Name = "Student Basic Yearly",
                            StripeMonthlyPriceId = "price_student_basic_monthly",
                            StripeYearlyPriceId = "price_student_basic_yearly",
                            Tier = 1,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2880),
                            UserType = 1,
                            YearlyPrice = 20000L
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-1111-1111-111111111111"),
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2890),
                            Description = "Standard student package with monthly billing",
                            IsActive = true,
                            MaxUsers = 1,
                            MonthlyPrice = 4000L,
                            Name = "Student Standard Monthly",
                            StripeMonthlyPriceId = "price_student_standard_monthly",
                            StripeYearlyPriceId = "price_student_standard_yearly",
                            Tier = 2,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2890),
                            UserType = 1,
                            YearlyPrice = 40000L
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2890),
                            Description = "Standard student package with yearly billing",
                            IsActive = true,
                            MaxUsers = 1,
                            MonthlyPrice = 4000L,
                            Name = "Student Standard Yearly",
                            StripeMonthlyPriceId = "price_student_standard_monthly",
                            StripeYearlyPriceId = "price_student_standard_yearly",
                            Tier = 2,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2890),
                            UserType = 1,
                            YearlyPrice = 40000L
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-1111-1111-111111111111"),
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2910),
                            Description = "Premium student package with monthly billing",
                            IsActive = true,
                            MaxUsers = 1,
                            MonthlyPrice = 6000L,
                            Name = "Student Premium Monthly",
                            StripeMonthlyPriceId = "price_student_premium_monthly",
                            StripeYearlyPriceId = "price_student_premium_yearly",
                            Tier = 3,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2910),
                            UserType = 1,
                            YearlyPrice = 60000L
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-2222-2222-222222222222"),
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2920),
                            Description = "Premium student package with yearly billing",
                            IsActive = true,
                            MaxUsers = 1,
                            MonthlyPrice = 6000L,
                            Name = "Student Premium Yearly",
                            StripeMonthlyPriceId = "price_student_premium_monthly",
                            StripeYearlyPriceId = "price_student_premium_yearly",
                            Tier = 3,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2920),
                            UserType = 1,
                            YearlyPrice = 60000L
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-1111-1111-111111111111"),
                            BasePrice = 3000L,
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2970),
                            Description = "Basic family package with monthly billing - dynamic pricing based on family size",
                            IsActive = true,
                            MaxFamilyMembers = 10,
                            MaxUsers = 10,
                            MinFamilyMembers = 1,
                            MonthlyPrice = 3000L,
                            Name = "Family Basic Monthly",
                            PricePerAdditionalMember = 1000L,
                            StripeMonthlyPriceId = "price_family_basic_monthly",
                            StripeYearlyPriceId = "price_family_basic_yearly",
                            Tier = 1,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2970),
                            UserType = 2,
                            YearlyPrice = 30000L
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-2222-2222-222222222222"),
                            BasePrice = 30000L,
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2980),
                            Description = "Basic family package with yearly billing - dynamic pricing based on family size",
                            IsActive = true,
                            MaxFamilyMembers = 10,
                            MaxUsers = 10,
                            MinFamilyMembers = 1,
                            MonthlyPrice = 3000L,
                            Name = "Family Basic Yearly",
                            PricePerAdditionalMember = 2000L,
                            StripeMonthlyPriceId = "price_family_basic_monthly",
                            StripeYearlyPriceId = "price_family_basic_yearly",
                            Tier = 1,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2980),
                            UserType = 2,
                            YearlyPrice = 30000L
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-1111-1111-111111111111"),
                            BasePrice = 5000L,
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2990),
                            Description = "Standard family package with monthly billing - dynamic pricing based on family size",
                            IsActive = true,
                            MaxFamilyMembers = 10,
                            MaxUsers = 10,
                            MinFamilyMembers = 1,
                            MonthlyPrice = 5000L,
                            Name = "Family Standard Monthly",
                            PricePerAdditionalMember = 1000L,
                            StripeMonthlyPriceId = "price_family_standard_monthly",
                            StripeYearlyPriceId = "price_family_standard_yearly",
                            Tier = 2,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2990),
                            UserType = 2,
                            YearlyPrice = 50000L
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-2222-2222-222222222222"),
                            BasePrice = 50000L,
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2990),
                            Description = "Standard family package with yearly billing - dynamic pricing based on family size",
                            IsActive = true,
                            MaxFamilyMembers = 10,
                            MaxUsers = 10,
                            MinFamilyMembers = 1,
                            MonthlyPrice = 5000L,
                            Name = "Family Standard Yearly",
                            PricePerAdditionalMember = 2000L,
                            StripeMonthlyPriceId = "price_family_standard_monthly",
                            StripeYearlyPriceId = "price_family_standard_yearly",
                            Tier = 2,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(2990),
                            UserType = 2,
                            YearlyPrice = 50000L
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-1111-1111-111111111111"),
                            BasePrice = 8000L,
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3000),
                            Description = "Premium family package with monthly billing - dynamic pricing based on family size",
                            IsActive = true,
                            MaxFamilyMembers = 10,
                            MaxUsers = 10,
                            MinFamilyMembers = 1,
                            MonthlyPrice = 8000L,
                            Name = "Family Premium Monthly",
                            PricePerAdditionalMember = 1000L,
                            StripeMonthlyPriceId = "price_family_premium_monthly",
                            StripeYearlyPriceId = "price_family_premium_yearly",
                            Tier = 3,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3000),
                            UserType = 2,
                            YearlyPrice = 80000L
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-2222-2222-222222222222"),
                            BasePrice = 80000L,
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3030),
                            Description = "Premium family package with yearly billing - dynamic pricing based on family size",
                            IsActive = true,
                            MaxFamilyMembers = 10,
                            MaxUsers = 10,
                            MinFamilyMembers = 1,
                            MonthlyPrice = 8000L,
                            Name = "Family Premium Yearly",
                            PricePerAdditionalMember = 2000L,
                            StripeMonthlyPriceId = "price_family_premium_monthly",
                            StripeYearlyPriceId = "price_family_premium_yearly",
                            Tier = 3,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3030),
                            UserType = 2,
                            YearlyPrice = 80000L
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-1111-1111-111111111111"),
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3030),
                            Description = "Basic supervisor package with monthly billing",
                            IsActive = true,
                            MaxUsers = 50,
                            MonthlyPrice = 10000L,
                            Name = "Supervisor Basic Monthly",
                            StripeMonthlyPriceId = "price_supervisor_basic_monthly",
                            StripeYearlyPriceId = "price_supervisor_basic_yearly",
                            Tier = 1,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3030),
                            UserType = 3,
                            YearlyPrice = 100000L
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-2222-2222-222222222222"),
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3040),
                            Description = "Basic supervisor package with yearly billing",
                            IsActive = true,
                            MaxUsers = 50,
                            MonthlyPrice = 10000L,
                            Name = "Supervisor Basic Yearly",
                            StripeMonthlyPriceId = "price_supervisor_basic_monthly",
                            StripeYearlyPriceId = "price_supervisor_basic_yearly",
                            Tier = 1,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3040),
                            UserType = 3,
                            YearlyPrice = 100000L
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-1111-1111-111111111111"),
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3040),
                            Description = "Standard supervisor package with monthly billing",
                            IsActive = true,
                            MaxUsers = 100,
                            MonthlyPrice = 20000L,
                            Name = "Supervisor Standard Monthly",
                            StripeMonthlyPriceId = "price_supervisor_standard_monthly",
                            StripeYearlyPriceId = "price_supervisor_standard_yearly",
                            Tier = 2,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3040),
                            UserType = 3,
                            YearlyPrice = 200000L
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-2222-2222-222222222222"),
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3050),
                            Description = "Standard supervisor package with yearly billing",
                            IsActive = true,
                            MaxUsers = 100,
                            MonthlyPrice = 20000L,
                            Name = "Supervisor Standard Yearly",
                            StripeMonthlyPriceId = "price_supervisor_standard_monthly",
                            StripeYearlyPriceId = "price_supervisor_standard_yearly",
                            Tier = 2,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3050),
                            UserType = 3,
                            YearlyPrice = 200000L
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-1111-1111-111111111111"),
                            BillingInterval = 3,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3050),
                            Description = "Premium supervisor package with monthly billing",
                            IsActive = true,
                            MaxUsers = 500,
                            MonthlyPrice = 30000L,
                            Name = "Supervisor Premium Monthly",
                            StripeMonthlyPriceId = "price_supervisor_premium_monthly",
                            StripeYearlyPriceId = "price_supervisor_premium_yearly",
                            Tier = 3,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3050),
                            UserType = 3,
                            YearlyPrice = 300000L
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-2222-2222-222222222222"),
                            BillingInterval = 4,
                            CreatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3060),
                            Description = "Premium supervisor package with yearly billing",
                            IsActive = true,
                            MaxUsers = 500,
                            MonthlyPrice = 30000L,
                            Name = "Supervisor Premium Yearly",
                            StripeMonthlyPriceId = "price_supervisor_premium_monthly",
                            StripeYearlyPriceId = "price_supervisor_premium_yearly",
                            Tier = 3,
                            TrialDays = 0,
                            UpdatedAt = new DateTime(2025, 9, 25, 13, 18, 5, 322, DateTimeKind.Utc).AddTicks(3060),
                            UserType = 3,
                            YearlyPrice = 300000L
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.SubscriptionPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripeInvoiceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionPayments");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.SupervisorApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ApprovedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPersonEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactPersonFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPersonLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPersonPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TemporaryPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationDate");

                    b.HasIndex("ApprovalStatus");

                    b.HasIndex("ApprovedUserId")
                        .IsUnique()
                        .HasFilter("[ApprovedUserId] IS NOT NULL");

                    b.HasIndex("ContactPersonEmail");

                    b.ToTable("SupervisorApplications");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("EmailVerificationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOneTimeLoginUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MustChangePasswordOnNextLogin")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalGeneratedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PasswordResetToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActiveSubscriptionId")
                        .IsUnique()
                        .HasFilter("[ActiveSubscriptionId] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SupervisorId");

                    b.HasIndex("SupervisorId", "Role");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ApprovalStatus = 1,
                            City = "Tirana",
                            CreateAt = new DateTime(2025, 9, 25, 13, 18, 5, 692, DateTimeKind.Utc).AddTicks(3590),
                            DateOfBirth = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@teachapp.com",
                            FirstName = "System",
                            IsEmailVerified = true,
                            IsOneTimeLoginUsed = false,
                            LastName = "Administrator",
                            MustChangePasswordOnNextLogin = false,
                            PasswordHash = "$2a$12$tao5gqZTRNYV0Yajxsyqburu8y0noZOQIwyd8BcjshxRzcxsSBV7y",
                            PhoneNumber = "+35500000000",
                            Profession = "Administrator",
                            RefreshToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            RefreshTokenExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = 0,
                            School = "Main Admin Office"
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Link", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.LearnHub", "LearnHub")
                        .WithMany("Links")
                        .HasForeignKey("LearnHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearnHub");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Option", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.UploadedFile", "OptionImage")
                        .WithMany()
                        .HasForeignKey("OptionImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TeachingBACKEND.Domain.Entities.Quizz", "Quizz")
                        .WithMany("Options")
                        .HasForeignKey("QuizzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionImage");

                    b.Navigation("Quizz");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Payment", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany("Payments")
                        .HasForeignKey("SubscriptionPackageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeachingBACKEND.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SubscriptionPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Quizz", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.UploadedFile", "ExplanationAudio")
                        .WithMany()
                        .HasForeignKey("ExplanationAudioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TeachingBACKEND.Domain.Entities.Link", "Link")
                        .WithMany("Quizzes")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachingBACKEND.Domain.Entities.Quizz", "ParentQuiz")
                        .WithMany("ChildQuizzes")
                        .HasForeignKey("ParentQuizId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TeachingBACKEND.Domain.Entities.UploadedFile", "QuestionAudio")
                        .WithMany()
                        .HasForeignKey("QuestionAudioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TeachingBACKEND.Domain.Entities.QuizType", "QuizzType")
                        .WithMany()
                        .HasForeignKey("QuizzTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExplanationAudio");

                    b.Navigation("Link");

                    b.Navigation("ParentQuiz");

                    b.Navigation("QuestionAudio");

                    b.Navigation("QuizzType");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.StudentPerformanceSummary", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachingBACKEND.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.StudentQuizPerformance", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachingBACKEND.Domain.Entities.Quizz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachingBACKEND.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.StudentQuizSession", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachingBACKEND.Domain.Entities.Quizz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachingBACKEND.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachingBACKEND.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.SubscriptionPayment", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.Subscription", "Subscription")
                        .WithMany("Payments")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.SupervisorApplication", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.User", "ApprovedUser")
                        .WithOne()
                        .HasForeignKey("TeachingBACKEND.Domain.Entities.SupervisorApplication", "ApprovedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedUser");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.User", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.Subscription", "ActiveSubscription")
                        .WithOne()
                        .HasForeignKey("TeachingBACKEND.Domain.Entities.User", "ActiveSubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeachingBACKEND.Domain.Entities.User", "Supervisor")
                        .WithMany("SupervisedUsers")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ActiveSubscription");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.LearnHub", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Link", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Quizz", b =>
                {
                    b.Navigation("ChildQuizzes");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.SubscriptionPackage", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.User", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Subscriptions");

                    b.Navigation("SupervisedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
