// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachingBACKEND.Data;

#nullable disable

namespace TeachingBACKEND.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527093817_GuidDefaultsForLearnHub_Link_Quizz")]
    partial class GuidDefaultsForLearnHub_Link_Quizz
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2d4a4ee-5fa2-4a33-bd3c-2bbf98e9310b"),
                            Name = "Tirana"
                        },
                        new
                        {
                            Id = new Guid("b8e13e5a-bba4-48b6-99d6-c4f123ab2cb3"),
                            Name = "Durrës"
                        },
                        new
                        {
                            Id = new Guid("d05f0e99-20f0-4c9a-b03f-3ea92ec02b41"),
                            Name = "Shkodër"
                        },
                        new
                        {
                            Id = new Guid("bc4e14b5-7d7e-4b6c-8b33-eaa2c91f9015"),
                            Name = "Vlorë"
                        },
                        new
                        {
                            Id = new Guid("2dff0b99-3d86-47a5-b7ad-4e6d3c0ec748"),
                            Name = "Elbasan"
                        },
                        new
                        {
                            Id = new Guid("12f4c32b-4a42-4b1f-9247-9b40efb21363"),
                            Name = "Fier"
                        },
                        new
                        {
                            Id = new Guid("f8d8e184-74c0-4551-b66b-7ae3f05e7ff5"),
                            Name = "Korçë"
                        },
                        new
                        {
                            Id = new Guid("69e02c84-4a61-406e-844d-24df2e25a983"),
                            Name = "Gjirokastër"
                        },
                        new
                        {
                            Id = new Guid("8e065f0d-71c1-4a63-804b-49b1d08c1407"),
                            Name = "Berat"
                        },
                        new
                        {
                            Id = new Guid("d28f0be5-5f17-4ec8-b365-7387c22234e9"),
                            Name = "Lezhë"
                        },
                        new
                        {
                            Id = new Guid("e5f957d6-7a31-45b2-bded-44e4992d4b83"),
                            Name = "Kukës"
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3f9a8f1-9c4e-4a91-8bcb-0b6b1583d3a1"),
                            Name = "Klasa 1"
                        },
                        new
                        {
                            Id = new Guid("a61d58b7-23f8-48f7-9778-3e048c5808a0"),
                            Name = "Klasa 2"
                        },
                        new
                        {
                            Id = new Guid("81bce1db-4f7c-4f6f-9e59-cde56a8200b6"),
                            Name = "Klasa 3"
                        },
                        new
                        {
                            Id = new Guid("f82a2ea4-c4c9-4895-9484-0197a299c02f"),
                            Name = "Klasa 4"
                        },
                        new
                        {
                            Id = new Guid("10840373-f0f4-4b10-9ee0-c5a831b6cf6a"),
                            Name = "Klasa 5"
                        },
                        new
                        {
                            Id = new Guid("7fc8018d-6310-4c1f-b878-4b3a5b0b265c"),
                            Name = "Klasa 6"
                        },
                        new
                        {
                            Id = new Guid("8e77a87f-e42b-487a-9cde-54f648c8c457"),
                            Name = "Klasa 7"
                        },
                        new
                        {
                            Id = new Guid("43e7b804-0e1a-4c82-9e44-6a194ee1ff63"),
                            Name = "Klasa 8"
                        },
                        new
                        {
                            Id = new Guid("fd4b14ea-1b79-4e4c-83e0-0196c55b4bc1"),
                            Name = "Klasa 9"
                        },
                        new
                        {
                            Id = new Guid("1c0b8bb7-9eb9-4a4d-8c4d-67de8057ae49"),
                            Name = "Klasa 10"
                        },
                        new
                        {
                            Id = new Guid("3402fc90-d7be-420e-a980-2ff430d84838"),
                            Name = "Klasa 11"
                        },
                        new
                        {
                            Id = new Guid("013d0df5-50ef-4269-8a12-9b4f91ef07e1"),
                            Name = "Klasa 12"
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.LearnHub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ClassType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LearnHubs");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("LearnHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LearnHubId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Quizz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("EmailVerificationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PasswordResetToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ApprovalStatus = 1,
                            City = "Tirana",
                            DateOfBirth = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@teachapp.com",
                            FirstName = "System",
                            IsEmailVerified = true,
                            LastName = "Administrator",
                            PasswordHash = "$2a$12$WjaJMZiTRR8wBYSChLvFne.lSXwHgwfv81Wb6C51Aj7FKBv4i/Ng.",
                            PhoneNumber = "+35500000000",
                            Profession = "Administrator",
                            RefreshToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            RefreshTokenExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = 0,
                            School = "Main Admin Office"
                        });
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Link", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.LearnHub", "LearnHub")
                        .WithMany("Links")
                        .HasForeignKey("LearnHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearnHub");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Payment", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Quizz", b =>
                {
                    b.HasOne("TeachingBACKEND.Domain.Entities.Link", "Link")
                        .WithMany("Quizzes")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.LearnHub", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.Link", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("TeachingBACKEND.Domain.Entities.User", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
